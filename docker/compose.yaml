services:

  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster_postgresql:
    image: postgres:16
    container_name: bag3d_dagster_postgresql
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    networks:
      - bag3d_network

  # This service stores the asset data that is generated by the pipeline
  data_postgresql:
    build:
      context: ./postgres
      args:
        - pg_user=$BAG3D_PG_USER
        - pg_pswd=$BAG3D_PG_PASSWORD
        - pg_db=$BAG3D_PG_DATABASE
#    image: $BAG3D_PG_DOCKERIMAGE
    command: ["-c", "shared_buffers=8GB", "-c", "max_connections=50", "-c", "work_mem=30MB", "-c", "logging_collector=on", "-c", "log_statement=all", "-c", "log_directory=/var/log/postgresql/"]
    platform: linux/amd64
    container_name: bag3d_data_postgresql
    shm_size: '1gb' 
    ports:
      - "5560:5432"
    volumes:
      - $BAG3D_TEST_DATA:/var/lib/postgresql/data
      - data_postgresql:/var/log/postgresql/
    environment:
      POSTGRES_USER: $BAG3D_PG_USER
      POSTGRES_PASSWORD: $BAG3D_PG_PASSWORD
      BAG3D_PG_PASSWORD: $BAG3D_PG_PASSWORD
      POSTGRES_DB: $BAG3D_PG_DATABASE
    restart: always
    networks:
      - bag3d_network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  bag3d_core:
    build:
      context: ../
      dockerfile: docker/pipeline/bag3d_core.dockerfile
    container_name: bag3d_pipeline_core
    image: bag3d_pipeline_core
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "bag3d_pipeline_core"
    env_file:
      - ./.env
    volumes:
      - bag3d_data_pipeline:/data/volume
    networks:
      - bag3d_network
    depends_on:
      - data_postgresql
  bag3d_floors_estimation:
    build:
      context: ../
      dockerfile: docker/pipeline/bag3d_floors_estimation.dockerfile
    container_name: bag3d_pipeline_floors_estimation
    image: bag3d_pipeline_floors_estimation
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "bag3d_pipeline_floors_estimation"
    env_file:
      - ./.env
    volumes:
      - bag3d_data_pipeline:/data/volume
    networks:
      - bag3d_network
    depends_on:
      - data_postgresql
  bag3d_party_walls:
    build:
      context: ../
      dockerfile: docker/pipeline/bag3d_party_walls.dockerfile
    container_name: bag3d_pipeline_party_walls
    image: bag3d_pipeline_party_walls
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "bag3d_pipeline_party_walls"
    env_file:
      - ./.env
    volumes:
      - bag3d_data_pipeline:/data/volume
    networks:
      - bag3d_network
    depends_on:
      - data_postgresql

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: ./dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: bag3d_dagster_webserver
    expose:
      - "3000"
    ports:
      - "3003:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - bag3d_network
    depends_on:
      - dagster_postgresql
      - bag3d_core
      - bag3d_floors_estimation
      - bag3d_party_walls

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: ./dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: bag3d_dagster_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - bag3d_network
    depends_on:
      - dagster_postgresql
      - bag3d_core
      - bag3d_floors_estimation
      - bag3d_party_walls

volumes:
  data_postgresql:
  bag3d_data_pipeline:
    external: true

networks:
  bag3d_network:
    driver: bridge
    name: bag3d_network
