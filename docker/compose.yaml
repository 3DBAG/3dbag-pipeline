services:

  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  dagster-postgresql:
    image: postgres:16
    container_name: bag3d-dagster-postgresql
    environment:
      POSTGRES_USER: $DAGSTER_POSTGRES_USER
      POSTGRES_PASSWORD: $DAGSTER_POSTGRES_PASSWORD
      POSTGRES_DB: $DAGSTER_POSTGRES_DB
    networks:
      - bag3d-network
    volumes:
      - bag3d-dagster-postgresql:/var/lib/postgresql/data

  # This service stores the asset data that is generated by the pipeline
  data-postgresql:
    build:
      context: ./postgres
      args:
        - pg_user=$BAG3D_PG_USER
        - pg_pswd=$BAG3D_PG_PASSWORD
        - pg_db=$BAG3D_PG_DATABASE
    command: ["-c", "shared_buffers=8GB", "-c", "max_connections=200", "-c", "work_mem=30MB", "-c", "logging_collector=on", "-c", "log_statement=all", "-c", "log_directory=/var/log/postgresql/"]
    platform: linux/amd64
    container_name: bag3d-data-postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${BAG3D_PG_DATABASE}"]
      interval: 40s
      retries: 3
      start_period: 60s
      timeout: 30s
    shm_size: '1gb' 
    ports:
      - "${BAG3D_PG_PORT_ON_HOST}:5432"
    volumes:
      - bag3d-data-pipeline:/data/volume
      - type: volume
        source: bag3d-data-postgresql
        target: /var/lib/postgresql/data
        volume:
          subpath: pgdata
      - type: volume
        source: bag3d-data-postgresql
        target: /var/log/postgresql
        volume:
          subpath: pglog
    restart: always
    networks:
      - bag3d-network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  bag3d-core:
    build:
      context: ../
      dockerfile: docker/pipeline/bag3d-core.dockerfile
      args:
        - VERSION=develop
    container_name: 3dbag-pipeline-core
    image: 3dbag-pipeline-core:${BAG3D_DOCKER_IMAGE_TAG}
    pull_policy: build
    restart: always
    environment:
      DAGSTER_CURRENT_IMAGE: "3dbag-pipeline-core:${BAG3D_DOCKER_IMAGE_TAG}"
    env_file:
      - ./.env
    volumes:
      - bag3d-data-pipeline:/data/volume
      - bag3d-dagster-home:/opt/dagster/dagster_home
    networks:
      - bag3d-network
    depends_on:
      data-postgresql:
        condition: service_healthy
        restart: true
    # Normally we wouldn't need watch:action:rebuild, but because we are using
    # dagster's DockerRunLauncher, it always starts a new container from the image, for
    # each run. While, watch:action:sync (or sync+restart)copies the changed local code into the
    # 3dbag-pipeline-core-develop container (not the image). But since DockerRunLauncher
    # doesn't actaully use this container, but always starts a new one, we have to build
    # a new image on each change.
    develop:
      watch:
        - action: rebuild
          path: ../packages/common
          target: /opt/3dbag-pipeline/packages/common
        - action: rebuild
          path: ../packages/common/pyproject.toml
          target: /opt/3dbag-pipeline/packages/common/pyproject.toml
        - action: rebuild
          path: ../packages/core
          target: /opt/3dbag-pipeline/packages/core
        - action: rebuild
          path: ../packages/core/pyproject.toml
          target: /opt/3dbag-pipeline/packages/core/pyproject.toml

  bag3d-floors-estimation:
    build:
      context: ../
      dockerfile: docker/pipeline/bag3d-floors-estimation.dockerfile
      args:
        - VERSION=develop
    container_name: 3dbag-pipeline-floors-estimation
    image: 3dbag-pipeline-floors-estimation:${BAG3D_DOCKER_IMAGE_TAG}
    pull_policy: build
    restart: always
    environment:
      DAGSTER_CURRENT_IMAGE: "3dbag-pipeline-floors-estimation:${BAG3D_DOCKER_IMAGE_TAG}"
    env_file:
      - ./.env
    volumes:
      - bag3d-data-pipeline:/data/volume
      - bag3d-dagster-home:/opt/dagster/dagster_home
    networks:
      - bag3d-network
    depends_on:
      data-postgresql:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: ../packages/common
          target: /opt/3dbag-pipeline/packages/common
        - action: rebuild
          path: ../packages/common/pyproject.toml
          target: /opt/3dbag-pipeline/packages/common/pyproject.toml
        - action: rebuild
          path: ../packages/floors_estimation
          target: /opt/3dbag-pipeline/packages/floors_estimation
        - action: rebuild
          path: ../packages/floors_estimation/pyproject.toml
          target: /opt/3dbag-pipeline/packages/floors_estimation/pyproject.toml
  bag3d-party-walls:
    build:
      context: ../
      dockerfile: docker/pipeline/bag3d-party-walls.dockerfile
      args:
        - VERSION=develop
    container_name: 3dbag-pipeline-party-walls
    image: 3dbag-pipeline-party-walls:${BAG3D_DOCKER_IMAGE_TAG}
    pull_policy: build
    restart: always
    environment:
      DAGSTER_CURRENT_IMAGE: "3dbag-pipeline-party-walls:${BAG3D_DOCKER_IMAGE_TAG}"
    env_file:
      - ./.env
    volumes:
      - bag3d-data-pipeline:/data/volume
      - bag3d-dagster-home:/opt/dagster/dagster_home
    networks:
      - bag3d-network
    depends_on:
      data-postgresql:
        condition: service_healthy
        restart: true
    develop:
      watch:
        - action: rebuild
          path: ../packages/common
          target: /opt/3dbag-pipeline/packages/common
        - action: rebuild
          path: ../packages/common/pyproject.toml
          target: /opt/3dbag-pipeline/packages/common/pyproject.toml
        - action: rebuild
          path: ../packages/party_walls
          target: /opt/3dbag-pipeline/packages/party_walls
        - action: rebuild
          path: ../packages/party_walls/pyproject.toml
          target: /opt/3dbag-pipeline/packages/party_walls/pyproject.toml

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster-webserver:
    build:
      context: ./dagster
    image: 3dgi/3dbag-pipeline-dagster:${BAG3D_DOCKER_IMAGE_TAG}
    pull_policy: build
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: bag3d-dagster-webserver
    expose:
      - "3000"
    ports:
      - "${DAGSTER_SERVER_PORT}:3000"
    env_file:
      - ./.env
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - bag3d-dagster-home:/opt/dagster/dagster_home
    networks:
      - bag3d-network
    depends_on:
      - dagster-postgresql
      - bag3d-core
      - bag3d-floors-estimation
      - bag3d-party-walls

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster-daemon:
    build:
      context: ./dagster
    image: 3dgi/3dbag-pipeline-dagster:${BAG3D_DOCKER_IMAGE_TAG}
    pull_policy: build
    entrypoint:
      - dagster-daemon
      - run
    container_name: bag3d-dagster-daemon
    restart: on-failure
    env_file:
      - ./.env
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - bag3d-dagster-home:/opt/dagster/dagster_home
    networks:
      - bag3d-network
    depends_on:
      - dagster-postgresql
      - bag3d-core
      - bag3d-floors-estimation
      - bag3d-party-walls

volumes:
  bag3d-data-postgresql:
    external: true
    name: $BAG3D_DOCKER_VOLUME_DATA_POSTGRESQL
  bag3d-data-pipeline:
    external: true
    name: $BAG3D_DOCKER_VOLUME_DATA_PIPELINE
  bag3d-dagster-postgresql:
    external: true
    name: $BAG3D_DOCKER_VOLUME_DAGSTER_POSTGRESQL
  bag3d-dagster-home:
    external: true
    name: $BAG3D_DOCKER_VOLUME_DAGSTER_HOME

networks:
  bag3d-network:
    driver: bridge
    name: $BAG3D_DOCKER_NETWORK
